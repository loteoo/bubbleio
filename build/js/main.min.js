(function () {
'use strict';

function h(name, props) {
  var node;
  var rest = [];
  var children = [];
  var length = arguments.length;

  while (length-- > 2) rest.push(arguments[length]);

  while (rest.length) {
    if (Array.isArray((node = rest.pop()))) {
      for (length = node.length; length--; ) {
        rest.push(node[length]);
      }
    } else if (node != null && node !== true && node !== false) {
      children.push(node);
    }
  }

  return typeof name === "function"
    ? name(props || {}, children)
    : {
        name: name,
        props: props || {},
        children: children
      }
}

function app(state, actions, view, container) {
  var renderLock;
  var invokeLaterStack = [];
  var rootElement = (container && container.children[0]) || null;
  var lastNode = rootElement && toVNode(rootElement, [].map);
  var globalState = copy(state);
  var wiredActions = copy(actions);

  scheduleRender(wireStateToActions([], globalState, wiredActions));

  return wiredActions

  function toVNode(element, map) {
    return {
      name: element.nodeName.toLowerCase(),
      props: {},
      children: map.call(element.childNodes, function(element) {
        return element.nodeType === 3
          ? element.nodeValue
          : toVNode(element, map)
      })
    }
  }

  function render() {
    renderLock = !renderLock;

    var next = view(globalState, wiredActions);
    if (container && !renderLock) {
      rootElement = patch(container, rootElement, lastNode, (lastNode = next));
    }

    while ((next = invokeLaterStack.pop())) next();
  }

  function scheduleRender() {
    if (!renderLock) {
      renderLock = !renderLock;
      setTimeout(render);
    }
  }

  function copy(target, source) {
    var obj = {};

    for (var i in target) obj[i] = target[i];
    for (var i in source) obj[i] = source[i];

    return obj
  }

  function set(path, value, source) {
    var target = {};
    if (path.length) {
      target[path[0]] =
        path.length > 1 ? set(path.slice(1), value, source[path[0]]) : value;
      return copy(source, target)
    }
    return value
  }

  function get(path, source) {
    for (var i = 0; i < path.length; i++) {
      source = source[path[i]];
    }
    return source
  }

  function wireStateToActions(path, state, actions) {
    for (var key in actions) {
      typeof actions[key] === "function"
        ? (function(key, action) {
            actions[key] = function(data) {
              if (typeof (data = action(data)) === "function") {
                data = data(get(path, globalState), actions);
              }

              if (
                data &&
                data !== (state = get(path, globalState)) &&
                !data.then // Promise
              ) {
                scheduleRender(
                  (globalState = set(path, copy(state, data), globalState))
                );
              }

              return data
            };
          })(key, actions[key])
        : wireStateToActions(
            path.concat(key),
            (state[key] = state[key] || {}),
            (actions[key] = copy(actions[key]))
          );
    }
  }

  function getKey(node) {
    return node && node.props ? node.props.key : null
  }

  function setElementProp(element, name, value, isSVG, oldValue) {
    if (name === "key") {
    } else if (name === "style") {
      for (var i in copy(oldValue, value)) {
        element[name][i] = value == null || value[i] == null ? "" : value[i];
      }
    } else {
      if (typeof value === "function" || (name in element && !isSVG)) {
        element[name] = value == null ? "" : value;
      } else if (value != null && value !== false) {
        element.setAttribute(name, value);
      }

      if (value == null || value === false) {
        element.removeAttribute(name);
      }
    }
  }

  function createElement(node, isSVG) {
    var element =
      typeof node === "string" || typeof node === "number"
        ? document.createTextNode(node)
        : (isSVG = isSVG || node.name === "svg")
          ? document.createElementNS("http://www.w3.org/2000/svg", node.name)
          : document.createElement(node.name);

    if (node.props) {
      if (node.props.oncreate) {
        invokeLaterStack.push(function() {
          node.props.oncreate(element);
        });
      }

      for (var i = 0; i < node.children.length; i++) {
        element.appendChild(createElement(node.children[i], isSVG));
      }

      for (var name in node.props) {
        setElementProp(element, name, node.props[name], isSVG);
      }
    }

    return element
  }

  function updateElement(element, oldProps, props, isSVG) {
    for (var name in copy(oldProps, props)) {
      if (
        props[name] !==
        (name === "value" || name === "checked"
          ? element[name]
          : oldProps[name])
      ) {
        setElementProp(element, name, props[name], isSVG, oldProps[name]);
      }
    }

    if (props.onupdate) {
      invokeLaterStack.push(function() {
        props.onupdate(element, oldProps);
      });
    }
  }

  function removeChildren(element, node, props) {
    if ((props = node.props)) {
      for (var i = 0; i < node.children.length; i++) {
        removeChildren(element.childNodes[i], node.children[i]);
      }

      if (props.ondestroy) {
        props.ondestroy(element);
      }
    }
    return element
  }

  function removeElement(parent, element, node, cb) {
    function done() {
      parent.removeChild(removeChildren(element, node));
    }

    if (node.props && (cb = node.props.onremove)) {
      cb(element, done);
    } else {
      done();
    }
  }

  function patch(parent, element, oldNode, node, isSVG, nextSibling) {
    if (node === oldNode) {
    } else if (oldNode == null) {
      element = parent.insertBefore(createElement(node, isSVG), element);
    } else if (node.name && node.name === oldNode.name) {
      updateElement(
        element,
        oldNode.props,
        node.props,
        (isSVG = isSVG || node.name === "svg")
      );

      var oldElements = [];
      var oldKeyed = {};
      var newKeyed = {};

      for (var i = 0; i < oldNode.children.length; i++) {
        oldElements[i] = element.childNodes[i];

        var oldChild = oldNode.children[i];
        var oldKey = getKey(oldChild);

        if (null != oldKey) {
          oldKeyed[oldKey] = [oldElements[i], oldChild];
        }
      }

      var i = 0;
      var j = 0;

      while (j < node.children.length) {
        var oldChild = oldNode.children[i];
        var newChild = node.children[j];

        var oldKey = getKey(oldChild);
        var newKey = getKey(newChild);

        if (newKeyed[oldKey]) {
          i++;
          continue
        }

        if (newKey == null) {
          if (oldKey == null) {
            patch(element, oldElements[i], oldChild, newChild, isSVG);
            j++;
          }
          i++;
        } else {
          var recyledNode = oldKeyed[newKey] || [];

          if (oldKey === newKey) {
            patch(element, recyledNode[0], recyledNode[1], newChild, isSVG);
            i++;
          } else if (recyledNode[0]) {
            patch(
              element,
              element.insertBefore(recyledNode[0], oldElements[i]),
              recyledNode[1],
              newChild,
              isSVG
            );
          } else {
            patch(element, oldElements[i], null, newChild, isSVG);
          }

          j++;
          newKeyed[newKey] = newChild;
        }
      }

      while (i < oldNode.children.length) {
        var oldChild = oldNode.children[i];
        if (getKey(oldChild) == null) {
          removeElement(element, oldElements[i], oldChild);
        }
        i++;
      }

      for (var i in oldKeyed) {
        if (!newKeyed[oldKeyed[i][1].props.key]) {
          removeElement(element, oldKeyed[i][0], oldKeyed[i][1]);
        }
      }
    } else if (node.name === oldNode.name) {
      element.nodeValue = node;
    } else {
      element = parent.insertBefore(
        createElement(node, isSVG),
        (nextSibling = element)
      );
      removeElement(parent, nextSibling, oldNode);
    }
    return element
  }
}

function Link(props, children) {
  var to = props.to;
  var location = props.location || window.location;

  props.href = to;
  props.onclick = function(e) {
    if (
      e.button !== 0 ||
      e.altKey ||
      e.metaKey ||
      e.ctrlKey ||
      e.shiftKey ||
      props.target === "_blank" ||
      e.currentTarget.origin !== location.origin
    ) {
    } else {
      e.preventDefault();

      if (to !== location.pathname) {
        history.pushState(location.pathname, "", to);
      }
    }
  };

  return h("a", props, children)
}

function wrapHistory(keys) {
  return keys.reduce(function(next, key) {
    var fn = history[key];

    history[key] = function(data, title, url) {
      fn.call(this, data, title, url);
      dispatchEvent(new CustomEvent("pushstate", { detail: data }));
    };

    return function() {
      history[key] = fn;
      next && next();
    }
  }, null)
}

var location = {
  state: {
    pathname: window.location.pathname,
    previous: window.location.pathname
  },
  actions: {
    go: function(pathname) {
      history.pushState(null, "", pathname);
    },
    set: function(data) {
      return data
    }
  },
  subscribe: function(actions) {
    function handleLocationChange(e) {
      actions.set({
        pathname: window.location.pathname,
        previous: e.detail
          ? (window.location.previous = e.detail)
          : window.location.previous
      });
    }

    var unwrap = wrapHistory(["pushState", "replaceState"]);

    addEventListener("pushstate", handleLocationChange);
    addEventListener("popstate", handleLocationChange);

    return function() {
      removeEventListener("pushstate", handleLocationChange);
      removeEventListener("popstate", handleLocationChange);
      unwrap();
    }
  }
};

const timeSince = (date) => {

  let seconds = Math.floor((new Date() - date) / 1000);

  let interval = Math.floor(seconds / 31536000);

  if (interval >= 1) {
    return interval + " years ago";
  }
  interval = Math.floor(seconds / 2592000);
  if (interval >= 1) {
    return interval + " months ago";
  }
  interval = Math.floor(seconds / 86400);
  if (interval >= 1) {
    return interval + " days ago";
  }
  interval = Math.floor(seconds / 3600);
  if (interval >= 1) {
    return interval + " hours ago";
  }
  interval = Math.floor(seconds / 60);
  if (interval >= 1) {
    return interval + " minutes ago";
  }

  if (seconds > 1) {
    return Math.floor(seconds) + " seconds ago";
  } else {
    return "now";
  }

};





const isElementInViewport = (el) => {
  let rect = el.getBoundingClientRect();
  return (
    rect.top >= 0 &&
    rect.left >= 0 &&
    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */
    rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */
  );
};


const ObjectId = (m = Math, d = Date, h = 16, s = s => m.floor(s).toString(h)) =>
    s(d.now() / 1000) + ' '.repeat(h).replace(/./g, () => s(m.random() * h));



const getStateFromStorage = () => JSON.parse(window.localStorage.getItem('bubbleio'));

const storeStateInStorage = (state) => window.localStorage.setItem('bubbleio', JSON.stringify(state));



const shortenText = (s, n) => {
    var cut= s.indexOf(' ', n);
    if(cut== -1) return s;
    return s.substring(0, cut)
};

const mergeStates = (stateA, stateB) => {

  // Merge the threads array before merging the bubbles
  if (stateB.bubbles) {
    for (var i = 0; i < stateB.bubbles.length; i++) { // For each new bubble
      let matchFound = false;
      if (stateA.bubbles) {
        for (var j = 0; j < stateA.bubbles.length; j++) { // find match
          if (stateB.bubbles[i]._id == stateA.bubbles[j]._id) {
            matchFound = true;
            stateA.bubbles[j] = mergeBubbles(stateA.bubbles[j], stateB.bubbles[i]);
          }
        }
      } else {
        stateA.bubbles = [];
      }
      if (!matchFound) {
        stateA.bubbles.push(stateB.bubbles[i]);
      }
    }
  }


  stateB.bubbles = stateA.bubbles; // TODO: Optimize this (currently the array gets passed around 3 times, should be 1 time only)

  // Merge the state
  let newState = Object.assign({}, stateA, stateB);
  storeStateInStorage(newState);
  return newState;
};










const mergeBubbles = (bubbleA, bubbleB) => {

  // TODO: User forEach

  // Merge the threads array before merging the bubbles
  if (bubbleB.threads) {
    for (var i = 0; i < bubbleB.threads.length; i++) { // For each new bubble
      let matchFound = false;
      if (bubbleA.threads) {
        for (var j = 0; j < bubbleA.threads.length; j++) { // find match
          if (bubbleB.threads[i]._id == bubbleA.threads[j]._id) {
            matchFound = true;
            bubbleA.threads[j] = mergeThreads(bubbleA.threads[j], bubbleB.threads[i]);
          }
        }
      } else {
        bubbleA.threads = [];
      }
      if (!matchFound) {
        bubbleA.threads.unshift(bubbleB.threads[i]);
      }
    }
  }

  // Sort the threads
  if (bubbleA.threads) {
    bubbleA.threads = sortByRelevance(bubbleA.threads);
  }

  bubbleB.threads = bubbleA.threads; // TODO: Optimize this (currently the array gets passed around 3 times, should be 1 time only)

  // Merge the state
  return Object.assign({}, bubbleA, bubbleB);
};










const mergeThreads = (threadA, threadB) => {

  // TODO: User forEach

  // Merge the messages array before merging the threads
  if (threadB.messages) {
    for (var i = 0; i < threadB.messages.length; i++) { // For each new bubble
      let matchFound = false;
      if (threadA.messages) {
        for (var j = 0; j < threadA.messages.length; j++) { // find match
          if (threadB.messages[i]._id == threadA.messages[j]._id) {
            matchFound = true;
            threadA.messages[j] = Object.assign(threadA.messages[j], threadB.messages[i]); // Basic shallow merge
          }
        }
      } else {
        threadA.messages = [];
      }
      if (!matchFound) {
        threadA.messages.push(threadB.messages[i]);
      }
    }
  }


  // Sort the messages
  if (threadA.messages) {
    threadA.messages.sort(compareAge);
  }

  threadB.messages = threadA.messages; // TODO: Optimize this (currently the array gets passed around 3 times, should be 1 time only)

  // Merge the state
  return Object.assign({}, threadA, threadB);
};







const sortByRelevance = (threads) => {

  // Score = (P-1) / (T+2)^G
  //
  // where,
  // P = points of an item (and -1 is to negate submitters vote)
  // T = time since submission (in hours)
  // G = Gravity, defaults to 1.8

  let now = new Date();

  // Calculate relevance for each thread
  for (var i = 0; i < threads.length; i++) {
    threads[i].relevance = threads[i].score / Math.pow((((now - threads[i].created) / 3600000) + 2), 1.8);
  }

  // Sort threads by "relevance"
  return threads.sort(compareRelevance);
};


const compareRelevance = (a, b) => {
  if (a.relevance < b.relevance) {
    return 1;
  }
  if (a.relevance > b.relevance) {
    return -1;
  }
  return 0;
};


const compareAge = (a, b) => {
  if (a.created < b.created) {
    return -1;
  }
  if (a.created > b.created) {
    return 1;
  }
  return 0;
};

const state = getStateFromStorage() || {
  username: "",
  bubbles: [],
  currentView: "globalView",
  currentBubble: null,
  currentThread: null,
  keyboardStatus: "closed",
  keyboardMode: "default"
};

const actions = {
  location: location.actions,
  login: ev => state => {
    ev.preventDefault();
    return { username: ev.target.username.value };
  },
  upvote: thread => (state, actions) => {
    socket.emit('thread upvote', thread);
    thread.score++;
    thread.upvoted++;
    // Append thread to list
    actions.updateState({
      bubbles: [
        {
          _id: thread.bubble_id,
          threads: [
            thread
          ]
        }
      ]
    });
  },
  expandKeyboard: status => {
    if (status == "closed") {
      return { keyboardStatus: "opened" }
    } else {
      return { keyboardStatus: "closed" }
    }
  },
  changeKeyboardMode: mode => ({keyboardMode: mode}),
  keyboardSubmit: ev => (state, actions) => {
    ev.preventDefault();
    if (ev.target.title.value) {

      let timestamp = new Date().getTime();

      if (state.currentView == "bubbleView") {



        // Create the thread object
        let thread = {
          _id: ObjectId(),
          title: ev.target.title.value,
          score: 0,
          created: timestamp,
          type: state.keyboardMode,
          author: state.username,
          bubble_id: state.currentBubble._id
        };

        if (state.keyboardMode == "text") {
          thread.text = ev.target.text.value;
        } else if (state.keyboardMode == "link") {
          thread.url = ev.target.link.value;
        } else if (state.keyboardMode == "image") {
          thread.src = ev.target.image_link.value;
        }


        // Append thread to list
        actions.updateState({
          bubbles: [
            {
              _id: thread.bubble_id,
              threads: [
                thread
              ]
            }
          ]
        });


        setTimeout(() => { // Scroll to top after the re-render/update cycle has ended (to include the new element's height)
          var threadList = document.querySelector(".bubble-view .frame");
          threadList.scrollTop = 0;
        }, 10);


        // Send new thread to server
        socket.emit('new thread', thread);

      } else {

        // Create the message object
        let message = {
          _id: ObjectId(),
          bubble_id: state.currentThread.bubble_id,
          thread_id: state.currentThread._id,
          sender: state.username,
          message: ev.target.title.value,
          created: timestamp
        };

        // Append message to list
        actions.updateState({
          bubbles: [
            {
              _id: message.bubble_id,
              threads: [
                {
                  _id: message.thread_id,
                  messages: [
                    message
                  ]
                }
              ]
            }
          ]
        });


        // Send new message to server
        socket.emit('new message', message);


      }

      state.keyboardMode = "default";
      ev.target.reset();
      return true
    }
  },
  updateState: newState => state => {
    // console.log("Update state");
    // console.log(newState);
    return mergeStates(state, newState)
  },
  loadMoreThreads: () => (state, actions) => {
    console.log("Loading bubble " + state.currentBubble.name + "...");
    fetch("/get/" + state.currentBubble.name)
    .then(response => response.json())
    .then(data => {
      actions.updateState(data);
      console.log("Loaded");
    });
  },
  loadMoreMessages: () => (state, actions) => {
    console.log("Loading messages in " + state.currentThread.title + "...");
    fetch("/get/" + state.currentBubble.name + "/" + state.currentThread._id)
    .then(response => response.json())
    .then(data => {
      actions.updateState(data);
      console.log("Loaded");
    });
  },
};

// Application root
const view = (state, actions) => {


  // If logged in
  if (state.username) {

    state.currentView = "globalView";

    let urlparts = window.location.pathname.split("/");


    // If there is a bubble in the URL
    if (urlparts[1]) {
      state.currentView = "bubbleView";

      // Check if bubble exists in cache
      state.currentBubble = state.bubbles.find(bubble => bubble.name == urlparts[1]); // TODO: DO THIS BETTER MORE OPTIMISATIONATION

      // If there was nothing in cache
      if (!state.currentBubble) {

        // Create a temporary bubble object
        state.currentBubble = {
          name: urlparts[1],
        };
      }

      // If no threads are in this bubble
      if (!state.currentBubble.threads || state.currentBubble.threads.length < 1) {
        state.currentBubble.threads = [];
        actions.loadMoreThreads();
      }
    }

    // If there is a thread in the URL
    if (urlparts[2]) {
      state.currentView = "threadView";

      // Check if thread exists in cache
      state.currentThread = state.currentBubble.threads.find(thread => thread._id == urlparts[2]); // TODO: DO THIS BETTER MORE OPTIMISATIONATION

      // If there was nothing in cache
      if (!state.currentThread) {

        // Create a temporary thread object
        state.currentThread = {
          _id: urlparts[2],
        };
      }


      // If no messages are in this thread
      if (!state.currentThread.messages || state.currentThread.messages.length < 1) {
        state.currentThread.messages = [];
        actions.loadMoreMessages();
      }

    }




    return h("div", { class: "slider " + state.currentView }, [
      globalView(state, actions),
      bubbleView(state.currentBubble, state, actions),
      threadView(state.currentThread, state.currentBubble, state, actions)
    ])

  } else {
    return h("form", { class: "loginForm", onsubmit: ev => { actions.login(ev); return false; } }, [
      h("h2", {}, "Pick a name"),
      h("input", { type: "text", placeholder: "Type here...", autofocus: "autofocus", name: "username", id: "username" })
    ])
  }
};







const globalView = (state, actions) => (
  h("div", { class: "global-view" }, [
    h("div", { class: "frame" }, [
      h("h2", {}, state.username),
      h("ul", { class: "bubbles" }, state.bubbles.map(bubbleItem))
    ])
  ])
);


const bubbleItem = (bubble) => {
  let userCountTxt = "";
  if (bubble.userCount) {
    userCountTxt = " (" + bubble.userCount + ")";
  }
  return h("li", {}, [
    Link({ to: "/" + bubble.name }, bubble.title + userCountTxt)
  ])
};









const bubbleView = (currentBubble, state, actions) => {
  if (currentBubble) {


    let userCountTxt = "";
    if (currentBubble.userCount) {
      userCountTxt = " (" + currentBubble.userCount + ")";
    }

    return h("div", { class: "bubble-view", _id: currentBubble._id, onupdate: (el, oldProps) => {
      if (oldProps._id != currentBubble._id) {
        // User switched bubbles

        console.log("join room: " + currentBubble._id);
        socket.emit('switch room', {
          prevRoomId: oldProps._id,
          nextRoomId: currentBubble._id
        });

        actions.loadMoreThreads();


      }
    } }, [
      h("div", { class: "frame", onscroll: (ev) => { if (isElementInViewport(ev.target.lastChild)) { actions.loadMoreThreads(); } } }, [
        h("div", { class: "bubble-header" }, [
          Link({ to: "/" + name, class: "back" }),
          h("h2", {}, currentBubble.title + userCountTxt)
        ]),
        h("ul", { class: "threads" }, currentBubble.threads.map(thread => threadItem(thread, currentBubble, actions))),
        keyboardComponent(state, actions),
        h("div", { class: "loadMore" })
      ])
    ])
  }
};



const threadItem = (thread, currentBubble, actions, display = "summary") => {
  if (!thread.userCount) {
    thread.userCount = 0;
  }
  if (!thread.messages) {
    thread.messages = [];
  }
  if (!thread.order) {
    thread.order = 0;
  }
  if (!thread.upvoted) {
    thread.upvoted = "";
  }
  // console.log(thread.order);

  let contentBlock;
  if (thread.type == "default") {
    contentBlock = null;
  } else if (thread.type == "text") {

    if (display == "summary") {
      contentBlock = h("div", { class: "text" }, shortenText(thread.text, 250) + "...");
    } else {
      contentBlock = h("div", { class: "text" }, thread.text);
    }
  } else if (thread.type == "link") {
    contentBlock = h("a", { class: "link", href: thread.url, target: "_blank" }, thread.url);
  } else if (thread.type == "image") {
    contentBlock = h("img", { class: "img", src: thread.src, alt: thread.title });
  } else if (thread.type == "youtube") {
    contentBlock = h("div", { class: "thumbnail", style: "background-image: url('"+thread.youtubeId+"')" });
  }


  if (display == "summary") {
    return h("li", { class: "thread", "data-type": thread.type, "data-upvoted": thread.upvoted, "data-display": display, onclick: () => {
      actions.location.go("/" + currentBubble.name + "/" + thread._id);
    } }, [
      h("div", { class: "header" }, [
        h("h4", {}, thread.title),
        h("p", {}, "by " + thread.author + " on " + currentBubble.name + " " + timeSince(thread.created))
      ]),
      contentBlock,
      threadFooter(thread, actions)
    ])
  } else if (display == "full") {
    return h("li", { class: "thread ", "data-type": thread.type, "data-upvoted": thread.upvoted }, [
      h("div", { class: "header" }, [
        h("div", { class: "thread-view-header" }, [
          h("div", { class: "back", onclick: () => {
            actions.location.go("/" + currentBubble.name);
          }}),
          h("h2", {}, thread.title)
        ]),
        h("p", {}, "by " + thread.author + " on " + currentBubble.name + " " + timeSince(thread.created))
      ]),
      contentBlock,
      threadFooter(thread, actions)
    ])
  }
};



const threadFooter = (thread, actions) => (
  h("div", { class: "footer" }, [
    h("div", { class: "users", userCount: thread.userCount, onupdate: (element, oldProps) => {
      if (oldProps.userCount < thread.userCount) {
        element.classList.add("countUp");
        setTimeout(() => {
          element.classList.remove("countUp");
        }, 25);
      } } }, [
        h("div", { class: "count" }, [
          h("span", {}, thread.userCount)
        ])
      ]),
    h("div", { class: "replies", messageCount: thread.messages.length, onupdate: (element, oldProps) => {
      if (oldProps.messageCount < thread.messages.length) {
        element.classList.add("countUp");
        setTimeout(() => {
          element.classList.remove("countUp");
        }, 25);
      } } }, [
        h("div", { class: "count" }, [
          h("span", {}, thread.messages.length)
        ])
      ]),
    h("button", { class: "upvote", score: thread.score, onclick: (ev) => {
      ev.stopPropagation();
      actions.upvote(thread);
    }, onupdate: (element, oldProps) => {
      if (oldProps.score < thread.score) {
        element.classList.add("countUp");
        setTimeout(() => {
          element.classList.remove("countUp");
        }, 25);
      }
    } }, thread.score)
  ])
);








const threadView = (currentThread, currentBubble, state, actions) => {
  if (currentThread) {
    return h("div", { class: "thread-view", _id: currentThread._id, bubble_id: currentThread.bubble_id, messageCount: currentThread.messages.length, onupdate: (el, oldProps) => {
      if (oldProps._id != currentThread._id) {
        // User switched thread
        actions.loadMoreMessages();

        socket.emit('switch room', {
          prevThread: oldProps,
          nextThread: state.currentThread
        });
        console.log("join thread: " + state.currentThread._id);
      }

      // If there is a new message
      if (oldProps.messageCount < currentThread.messages.length) {
        // Scroll down
        el.children[0].scrollTop = el.children[0].scrollHeight;
      }

    } }, [
      h("div", { class: "frame", onscroll: (ev) => { if (isElementInViewport(ev.target.firstChild)) { actions.loadMoreMessages(); } } }, [
        h("div", { class: "loadMoreMessages" }),
        threadItem(currentThread, currentBubble, actions, "full"),
        h("ul", { class: "messages" }, currentThread.messages.map(message => messageItem(message, state))),
        keyboardComponent(state, actions)
      ])
    ])
  }
};


const messageItem = (message, state) => {
  let provenance;
  if (message.sender == state.username) {
    provenance = "sent";
  } else {
    provenance = "received";
  }
  return h("li", { class: provenance }, [
    h("div", { class: "content" }, message.message),
    h("div", { class: "info" }, message.sender + " " + timeSince(message.created))
  ])
};











const keyboardComponent = (state, actions) => (
  h("form", { class: "keyboard " + state.keyboardMode, onsubmit: ev => { actions.keyboardSubmit(ev); return false; } }, [
    h("div", { class: "expander " + state.keyboardStatus, onclick: () => actions.expandKeyboard(state.keyboardStatus) }, [
      h("div", { class: "text", onclick: ev => { actions.changeKeyboardMode("text"); } }, "txt"),
      h("div", { class: "link", onclick: ev => { actions.changeKeyboardMode("link"); } }, "url"),
      h("div", { class: "image", onclick: ev => { actions.changeKeyboardMode("image"); } }, "pic")
    ]),
    h("input", { class: "title", type: "text", name: "title", placeholder: "Type something..." }),
    h("textarea", { placeholder: "Text...", name: "text" }),
    h("input", { class: "link", type: "text", name: "link", placeholder: "Paste link here" }),
    h("div", { class: "image" }, [
      h("input", { type: "file", name: "image_file", id: "image_file" }),
      h("label", { for: "image_file" }),
      h("input", { type: "text", name: "image_link", placeholder: "Or paste link here" })
    ]),
    h("button", { class: "submit", type: "submit" })
  ])
);

// Websocket connect
window.socket = io.connect(window.location.host);


// Load our hyperapp
window.main = app(state, actions, view, document.querySelector("main"));

// Activate our router
const unsubscribe = location.subscribe(main.location);

// Join appropriate socket rooms on load
if (state.currentBubble) {
  main.loadMoreThreads();
  socket.emit('switch room', {
    prevRoomId: null,
    nextRoomId: state.currentBubble._id
  });
  console.log("join room: " + state.currentBubble._id);
}
if (state.currentThread) {
  main.loadMoreMessages();
  socket.emit('switch room', {
    prevThread: null,
    nextThread: state.currentThread
  });
  console.log("join thread: " + state.currentThread._id);
}



// ======================================================================
// Received event handlers
// ======================================================================


window.socket.on('update state', newState => main.updateState(newState));

}());
