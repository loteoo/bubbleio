(function () {
'use strict';

function h(name, attributes /*, ...rest*/) {
  var node;
  var rest = [];
  var children = [];
  var length = arguments.length;

  while (length-- > 2) rest.push(arguments[length]);

  while (rest.length) {
    if ((node = rest.pop()) && node.pop /* Array? */) {
      for (length = node.length; length--; ) {
        rest.push(node[length]);
      }
    } else if (node != null && node !== true && node !== false) {
      children.push(node);
    }
  }

  return typeof name === "function"
    ? name(attributes || {}, children)
    : {
        nodeName: name,
        attributes: attributes || {},
        children: children,
        key: attributes && attributes.key
      }
}

function app(state, actions, view, container) {
  var renderLock;
  var invokeLaterStack = [];
  var rootElement = (container && container.children[0]) || null;
  var oldNode = rootElement && toVNode(rootElement, [].map);
  var globalState = clone(state);
  var wiredActions = clone(actions);

  scheduleRender(wireStateToActions([], globalState, wiredActions));

  return wiredActions

  function toVNode(element, map) {
    return {
      nodeName: element.nodeName.toLowerCase(),
      attributes: {},
      children: map.call(element.childNodes, function(element) {
        return element.nodeType === 3 // Node.TEXT_NODE
          ? element.nodeValue
          : toVNode(element, map)
      })
    }
  }

  function render() {
    renderLock = !renderLock;

    var next = view(globalState, wiredActions);
    if (container && !renderLock) {
      rootElement = patch(container, rootElement, oldNode, (oldNode = next));
    }

    while ((next = invokeLaterStack.pop())) next();
  }

  function scheduleRender() {
    if (!renderLock) {
      renderLock = !renderLock;
      setTimeout(render);
    }
  }

  function clone(target, source) {
    var obj = {};

    for (var i in target) obj[i] = target[i];
    for (var i in source) obj[i] = source[i];

    return obj
  }

  function set(path, value, source) {
    var target = {};
    if (path.length) {
      target[path[0]] =
        path.length > 1 ? set(path.slice(1), value, source[path[0]]) : value;
      return clone(source, target)
    }
    return value
  }

  function get(path, source) {
    for (var i = 0; i < path.length; i++) {
      source = source[path[i]];
    }
    return source
  }

  function wireStateToActions(path, state, actions) {
    for (var key in actions) {
      typeof actions[key] === "function"
        ? (function(key, action) {
            actions[key] = function(data) {
              if (typeof (data = action(data)) === "function") {
                data = data(get(path, globalState), actions);
              }

              if (
                data &&
                data !== (state = get(path, globalState)) &&
                !data.then // Promise
              ) {
                scheduleRender(
                  (globalState = set(path, clone(state, data), globalState))
                );
              }

              return data
            };
          })(key, actions[key])
        : wireStateToActions(
            path.concat(key),
            (state[key] = state[key] || {}),
            (actions[key] = clone(actions[key]))
          );
    }
  }

  function getKey(node) {
    return node ? node.key : null
  }

  function setElementProp(element, name, value, isSVG, oldValue) {
    if (name === "key") {
    } else if (name === "style") {
      for (var i in clone(oldValue, value)) {
        element[name][i] = value == null || value[i] == null ? "" : value[i];
      }
    } else {
      if (typeof value === "function" || (name in element && !isSVG)) {
        element[name] = value == null ? "" : value;
      } else if (value != null && value !== false) {
        element.setAttribute(name, value);
      }

      if (value == null || value === false) {
        element.removeAttribute(name);
      }
    }
  }

  function createElement(node, isSVG) {
    var element =
      typeof node === "string" || typeof node === "number"
        ? document.createTextNode(node)
        : (isSVG = isSVG || node.nodeName === "svg")
          ? document.createElementNS(
              "http://www.w3.org/2000/svg",
              node.nodeName
            )
          : document.createElement(node.nodeName);

    if (node.attributes) {
      if (node.attributes.oncreate) {
        invokeLaterStack.push(function() {
          node.attributes.oncreate(element);
        });
      }

      for (var i = 0; i < node.children.length; i++) {
        element.appendChild(createElement(node.children[i], isSVG));
      }

      for (var name in node.attributes) {
        setElementProp(element, name, node.attributes[name], isSVG);
      }
    }

    return element
  }

  function updateElement(element, oldProps, attributes, isSVG) {
    for (var name in clone(oldProps, attributes)) {
      if (
        attributes[name] !==
        (name === "value" || name === "checked"
          ? element[name]
          : oldProps[name])
      ) {
        setElementProp(element, name, attributes[name], isSVG, oldProps[name]);
      }
    }

    if (attributes.onupdate) {
      invokeLaterStack.push(function() {
        attributes.onupdate(element, oldProps);
      });
    }
  }

  function removeChildren(element, node, attributes) {
    if ((attributes = node.attributes)) {
      for (var i = 0; i < node.children.length; i++) {
        removeChildren(element.childNodes[i], node.children[i]);
      }

      if (attributes.ondestroy) {
        attributes.ondestroy(element);
      }
    }
    return element
  }

  function removeElement(parent, element, node, cb) {
    function done() {
      parent.removeChild(removeChildren(element, node));
    }

    if (node.attributes && (cb = node.attributes.onremove)) {
      cb(element, done);
    } else {
      done();
    }
  }

  function patch(parent, element, oldNode, node, isSVG, nextSibling) {
    if (node === oldNode) {
    } else if (oldNode == null) {
      element = parent.insertBefore(createElement(node, isSVG), element);
    } else if (node.nodeName && node.nodeName === oldNode.nodeName) {
      updateElement(
        element,
        oldNode.attributes,
        node.attributes,
        (isSVG = isSVG || node.nodeName === "svg")
      );

      var oldElements = [];
      var oldKeyed = {};
      var newKeyed = {};

      for (var i = 0; i < oldNode.children.length; i++) {
        oldElements[i] = element.childNodes[i];

        var oldChild = oldNode.children[i];
        var oldKey = getKey(oldChild);

        if (null != oldKey) {
          oldKeyed[oldKey] = [oldElements[i], oldChild];
        }
      }

      var i = 0;
      var j = 0;

      while (j < node.children.length) {
        var oldChild = oldNode.children[i];
        var newChild = node.children[j];

        var oldKey = getKey(oldChild);
        var newKey = getKey(newChild);

        if (newKeyed[oldKey]) {
          i++;
          continue
        }

        if (newKey == null) {
          if (oldKey == null) {
            patch(element, oldElements[i], oldChild, newChild, isSVG);
            j++;
          }
          i++;
        } else {
          var recyledNode = oldKeyed[newKey] || [];

          if (oldKey === newKey) {
            patch(element, recyledNode[0], recyledNode[1], newChild, isSVG);
            i++;
          } else if (recyledNode[0]) {
            patch(
              element,
              element.insertBefore(recyledNode[0], oldElements[i]),
              recyledNode[1],
              newChild,
              isSVG
            );
          } else {
            patch(element, oldElements[i], null, newChild, isSVG);
          }

          j++;
          newKeyed[newKey] = newChild;
        }
      }

      while (i < oldNode.children.length) {
        var oldChild = oldNode.children[i];
        if (getKey(oldChild) == null) {
          removeElement(element, oldElements[i], oldChild);
        }
        i++;
      }

      for (var i in oldKeyed) {
        if (!newKeyed[oldKeyed[i][1].key]) {
          removeElement(element, oldKeyed[i][0], oldKeyed[i][1]);
        }
      }
    } else if (node.nodeName === oldNode.nodeName) {
      element.nodeValue = node;
    } else {
      element = parent.insertBefore(
        createElement(node, isSVG),
        (nextSibling = element)
      );
      removeElement(parent, nextSibling, oldNode);
    }
    return element
  }
}

function Link(props, children) {
  var to = props.to;
  var location = props.location || window.location;

  props.href = to;
  props.onclick = function(e) {
    if (
      e.button !== 0 ||
      e.altKey ||
      e.metaKey ||
      e.ctrlKey ||
      e.shiftKey ||
      props.target === "_blank" ||
      e.currentTarget.origin !== location.origin
    ) {
    } else {
      e.preventDefault();

      if (to !== location.pathname) {
        history.pushState(location.pathname, "", to);
      }
    }
  };

  return h("a", props, children)
}

function wrapHistory(keys) {
  return keys.reduce(function(next, key) {
    var fn = history[key];

    history[key] = function(data, title, url) {
      fn.call(this, data, title, url);
      dispatchEvent(new CustomEvent("pushstate", { detail: data }));
    };

    return function() {
      history[key] = fn;
      next && next();
    }
  }, null)
}

var location$1 = {
  state: {
    pathname: window.location.pathname,
    previous: window.location.pathname
  },
  actions: {
    go: function(pathname) {
      history.pushState(null, "", pathname);
    },
    set: function(data) {
      return data
    }
  },
  subscribe: function(actions) {
    function handleLocationChange(e) {
      actions.set({
        pathname: window.location.pathname,
        previous: e.detail
          ? (window.location.previous = e.detail)
          : window.location.previous
      });
    }

    var unwrap = wrapHistory(["pushState", "replaceState"]);

    addEventListener("pushstate", handleLocationChange);
    addEventListener("popstate", handleLocationChange);

    return function() {
      removeEventListener("pushstate", handleLocationChange);
      removeEventListener("popstate", handleLocationChange);
      unwrap();
    }
  }
};

const timeSince = (date) => {

  let seconds = Math.floor((new Date() - date) / 1000);

  let interval = Math.floor(seconds / 31536000);

  if (interval >= 1) {
    return interval + " years ago";
  }
  interval = Math.floor(seconds / 2592000);
  if (interval >= 1) {
    return interval + " months ago";
  }
  interval = Math.floor(seconds / 86400);
  if (interval >= 1) {
    return interval + " days ago";
  }
  interval = Math.floor(seconds / 3600);
  if (interval >= 1) {
    return interval + " hours ago";
  }
  interval = Math.floor(seconds / 60);
  if (interval >= 1) {
    return interval + " minutes ago";
  }

  if (seconds > 1) {
    return Math.floor(seconds) + " seconds ago";
  } else {
    return "now";
  }

};





const isElementInViewport = (el) => {
  let rect = el.getBoundingClientRect();
  return (
    rect.top >= 0 &&
    rect.left >= 0 &&
    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */
    rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */
  );
};


const ObjectId = (m = Math, d = Date, h = 16, s = s => m.floor(s).toString(h)) =>
    s(d.now() / 1000) + ' '.repeat(h).replace(/./g, () => s(m.random() * h));



const getStateFromStorage = () => JSON.parse(window.localStorage.getItem('bubbleio'));

const storeStateInStorage = (state) => window.localStorage.setItem('bubbleio', JSON.stringify(state));



const shortenText = (s, n) => {
    if (s.length > n+3) {
      var cut= s.indexOf(' ', n);
      if(cut== -1) return s;
      return s.substring(0, cut) + "..."
    } else {
      return s
    }
};









const getYoutubeId = url => {
    var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/;
    var match = url.match(regExp);
    return (match&&match[7].length==11)? match[7] : false;
};











// State merging algorithm


const mergeStates = (stateA, stateB) => {

  // Merge the threads array before merging the bubbles
  if (stateB.bubbles) {
    for (var i = 0; i < stateB.bubbles.length; i++) { // For each new bubble
      let matchFound = false;
      if (stateA.bubbles) { // Find match if possible
        for (var j = 0; j < stateA.bubbles.length; j++) {
          if (stateB.bubbles[i]._id == stateA.bubbles[j]._id) {
            matchFound = true;
            stateA.bubbles[j] = mergeBubbles(stateA.bubbles[j], stateB.bubbles[i]);
          }
        }
      }
      if (!matchFound) {
        if (!stateB.bubbles[i].threads) {
          stateB.bubbles[i].threads = [];
        }
        // Sort this bubble's threads before merging
        stateB.bubbles[i].threads = sortByRelevance(stateB.bubbles[i].threads);

        stateA.bubbles.push(stateB.bubbles[i]);
      }
    }
  }


  stateB.bubbles = stateA.bubbles; // TODO: Optimize this (currently the array gets passed around 3 times, should be 1 time only)

  // Merge the state
  let newState = Object.assign({}, stateA, stateB);
  storeStateInStorage(newState);
  return newState;
};










const mergeBubbles = (bubbleA, bubbleB) => {

  // TODO: Use forEach

  // Merge the threads array before merging the bubbles
  if (bubbleB.threads) {
    for (var i = 0; i < bubbleB.threads.length; i++) { // For each new bubble
      let matchFound = false;

      if (bubbleA.threads) { // Find match if possible
        for (var j = 0; j < bubbleA.threads.length; j++) {
          if (bubbleB.threads[i]._id == bubbleA.threads[j]._id) {
            matchFound = true;
            bubbleA.threads[j] = mergeThreads(bubbleA.threads[j], bubbleB.threads[i]);
          }
        }
      }

      if (!matchFound) {
        if (!bubbleB.threads[i].messages) {
          bubbleB.threads[i].messages = [];
        }
        bubbleA.threads.unshift(bubbleB.threads[i]); // Insert in first place
      }
    }
  }

  // Sort the threads
  if (bubbleA.threads) {
    bubbleA.threads = sortByRelevance(bubbleA.threads);
  }

  bubbleB.threads = bubbleA.threads; // TODO: Optimize this (currently the array gets passed around 3 times, should be 1 time only)

  // Merge the state
  return Object.assign({}, bubbleA, bubbleB);
};










const mergeThreads = (threadA, threadB) => {

  // TODO: Use forEach

  // Merge the messages array before merging the threads
  if (threadB.messages) {
    for (var i = 0; i < threadB.messages.length; i++) { // For each new bubble
      let matchFound = false;
      if (threadA.messages) {
        for (var j = 0; j < threadA.messages.length; j++) { // find match
          if (threadB.messages[i]._id == threadA.messages[j]._id) {
            matchFound = true;
            threadA.messages[j] = Object.assign(threadA.messages[j], threadB.messages[i]); // Basic shallow merge
          }
        }
      } else {
        threadA.messages = [];
      }
      if (!matchFound) {
        threadA.messages.push(threadB.messages[i]); // Add at end
      }
    }
  }


  // Sort the messages
  if (threadA.messages) {
    threadA.messages.sort(compareAge);
  }

  threadB.messages = threadA.messages; // TODO: Optimize this (currently the array gets passed around 3 times, should be 1 time only)

  // Merge the state
  return Object.assign({}, threadA, threadB);
};







const sortByRelevance = (threads) => {

  // Score = (P-1) / (T+2)^G
  //
  // where,
  // P = points of an item (and -1 is to negate submitters vote)
  // T = time since submission (in hours)
  // G = Gravity, defaults to 1.8


  // Calculate relevance for each thread
  for (var i = 0; i < threads.length; i++) {

    if (!threads[i].messages) {
      threads[i].messages = [];
    }
    if (!threads[i].userCount) {
      threads[i].userCount = 0;
    }
    if (!threads[i].upvoted) {
      threads[i].upvoted = 0;
    }


    threads[i].relevance = (threads[i].score + (threads[i].messages.length/2) + 1) / Math.pow(((new Date() - threads[i].created) / 3600000), 1.8);

  }

  // Sort threads by "relevance"
  return threads.sort(compareRelevance);
};


const compareRelevance = (a, b) => {
  if (a.relevance < b.relevance) {
    return 1;
  }
  if (a.relevance > b.relevance) {
    return -1;
  }
  return 0;
};


const compareAge = (a, b) => {
  if (a.created < b.created) {
    return -1;
  }
  if (a.created > b.created) {
    return 1;
  }
  return 0;
};

const state = getStateFromStorage() || {
  user: {},
  bubbles: [],
  currentView: "userView",
  currentBubble: null,
  currentThread: null
};

const actions = {
  location: location$1.actions,
  updateState: newState => state => {
    // console.log("Update state");
    // console.log(newState);
    return mergeStates(state, newState)
  },
  removeBubble: bubbleToRemove => state => {

    state.bubbles = state.bubbles.filter(bubble => bubble._id != bubbleToRemove._id);

    storeStateInStorage(state);

    return {
      bubbles: state.bubbles
    }
  },
  removeThread: threadToRemove => state => {

    for (var i = 0; i < state.bubbles.length; i++) {
      if (state.bubbles[i]._id == threadToRemove.bubble_id) {
        state.bubbles[i].threads = state.bubbles[i].threads.filter(thread => thread._id != threadToRemove._id);
      }
    }
    storeStateInStorage(state);
    return {
      bubbles: state.bubbles
    }
  }
};

const BubbleForm = () =>
  h('form', {class: "bubbleForm", onsubmit: ev => {
    ev.preventDefault();


    if (ev.target.title.value) {

      // Create the bubble object
      let bubble = {
        _id: ObjectId(),
        name: ev.target.name.value,
        title: ev.target.title.value,
        desc: ev.target.desc.value,
        visibility: ev.target.visibility.value,
        created: new Date().getTime()
      };

      // Send new bubble to server for validation
      socket.emit('new bubble', bubble);

      ev.target.reset();
    }

  }}, [
    h('div', {class: "close", onclick: ev => {
      ev.target.parentElement.classList.remove("opened");
    }}),
    h('fieldset', null, [
      h('h2', null, ["Create a brand new bubble"]),
      h('input', {type: "text", name: "title", placeholder: "Pick a name for the bubble", required: true}),
      h('input', {type: "text", name: "name", placeholder: "Bubble alias", required: true}),
      h('textarea', {name: "desc", placeholder: "Describe this bubble and what should be posted here.", required: true}),
      h('p', null, ["Bubble visibility"]),
      h('div', {class: "row"}, [
        h('div', {class: "radio"}, [
          h('input', {type: "radio", name: "visibility", value: "public", id: "public", checked: true}),
          h('label', {for: "public"}, ["Public"])
        ]),
        h('div', {class: "radio"}, [
          h('input', {type: "radio", name: "visibility", value: "private", id: "private"}),
          h('label', {for: "private"}, ["Private"])
        ])
      ]),
      h('button', {type: "submit"}, ["Create bubble!"])
    ])
  ]);

const UserView = ({currentBubble, state}) =>
  h('div', {class: "user-view"}, [
    h('div', {class: "frame"}, [
      h('div', {class: "header"}, [
        h('h2', null, [state.user.username]),
        h('div', {class: "options"}, [
          h('button', {onclick: ev => {
            if (ev.target.nextSibling.classList.contains("opened")) {
              ev.target.nextSibling.classList.remove("opened");
            } else {
              ev.target.nextSibling.classList.add("opened");
            }
          }}
          ),
          h('ul', null, [
            h('li', {onclick: ev => {
              console.log("logout");
              localStorage.clear();
              location.reload();
            }}, [h('span', null, ["Log out"])])
          ])
        ])
      ]),
      h('ul', {class: "menu"}, [
        h('li', null, [
          h('span', null, ["My bubbles"]),
          h('ul', {class: "bubbles"}, [
            state.bubbles.map(bubble => BubbleItem({bubble: bubble, currentBubble: currentBubble})),
            h('li', null, [
              h('span', {onclick: ev => {
                ev.target.nextSibling.classList.add("opened");
              }}, ["Create bubble"]),
              BubbleForm()
            ])
          ])
        ]),
        h('li', null, [
          h('span', null, ["Multibubbles"]),
          h('ul', null, [
            h('li', null, [
              h('span', null, ["Create Multibubble"])
            ])
          ])
        ])
      ]),
      h('footer')
    ])
  ]);


const BubbleItem = ({bubble, currentBubble}) => {

  let currentClass = "";
  if (currentBubble) {
    if (bubble.name == currentBubble.name) {
      currentClass = "current";
    }
  }

  return (
    h('li', {class: currentClass, 'data-userCount': bubble.userCount}, [
      Link({to: "/" + bubble.name}, [
        bubble.title,
        h('div', {class: "users"}, [
          h('div', {class: "icon"}),
          h('span', {class: "count"}, [bubble.userCount])
        ])
      ])
    ])
  )
};

const ThreadItem = (thread, index, currentBubble, currentThread, actions) => {

  let threadTitle = h('h2', null, [shortenText(thread.title, 32)]);
  let contentBlock;
  if (thread.type == "default") {
    contentBlock = null;
  } else if (thread.type == "text") {
    contentBlock = h('div', {class: "text"}, [shortenText(thread.text, 250)]);
  } else if (thread.type == "link") {
    if (thread.url.match(/^(https?\:\/\/)?(www\.youtube\.com|youtu\.?be)\/.+$/)) { // If is youtube
      thread.src = "https://img.youtube.com/vi/"+getYoutubeId(thread.url)+"/hqdefault.jpg";
    } else if (thread.url.match(/^(http\:\/\/|https\:\/\/)?(www\.)?(vimeo\.com\/)([0-9]+)$/)) {
      // this is a vimeo link
    }
    threadTitle = h('h2', null, [h('a', {href: thread.url, target: "_blank"}, [shortenText(thread.title, 32)])]);
    contentBlock = h('a', {href: thread.url, target: "_blank", class: "link"}, [thread.url]);
  } else if (thread.type == "image") {
    contentBlock = h('div', {class: "img"}, [h('img', {src: thread.src, alt: thread.title})]);
  }



  let extraClass = " ";
  if (currentThread) { // If there is thread opened in the app
    if (thread._id == currentThread._id) { // If this is the one that is opened
      extraClass += "current";
    }
  }


  if (!thread.src) {
    extraClass += " noimage";
  }


  if (window.innerWidth >= 768) { // If desktop
    return (
      h('li', {key: thread._id, class: "thread desktop" + extraClass, index: index, 'data-type': thread.type, 'data-upvoted': thread.upvoted, onclick: ev => {
        actions.location.go("/" + currentBubble.name + "/" + thread._id);
      }, oncreate: el => {
        el.style.transform = "translateX(-100%)";
        el.style.opacity = "0";
        setTimeout(() => {
          el.removeAttribute("style");
        }, index * 50 + 50);
      }, onupdate: (el, oldProps) => {
        if (index != oldProps.index) { // If order in list changed
          el.style.transitionDuration = "0ms";
          el.style.zIndex = "1";
          el.style.transform = "translateY(calc("+(oldProps.index - index)*100+"% + "+(oldProps.index - index)+"em))";
          setTimeout(() => {
            el.removeAttribute("style");
          }, 50);
        }
      }}, [
        h('div', {class: "thumbnail", Style: "background-image: url('"+thread.src+"')"}),
        h('div', {class: "content"}, [
          threadTitle,
          h('div', {class: "info"}, [
            h('p', null, ["by " + thread.author + " on " + currentBubble.name + " " + timeSince(thread.created)]),
            threadFooter(thread, actions)
          ])
        ])
      ])
    )
  } else { // if mobile
    return (
      h('li', {key: thread._id, class: "thread" + extraClass, index: index, 'data-type': thread.type, 'data-upvoted': thread.upvoted, onclick: () => {
          actions.location.go("/" + currentBubble.name + "/" + thread._id);
        }, oncreate: el => {
          el.style.transform = "translateX(-100%)";
          el.style.opacity = "0";
          setTimeout(() => {
            el.removeAttribute("style");
          }, index * 50 + 50);
        }, onupdate: (el, oldProps) => {
          if (index != oldProps.index) { // If order in list changed
            el.style.transitionDuration = "0ms";
            el.style.zIndex = "1";
            el.style.transform = "translateY(calc("+(oldProps.index - index)*100+"% + "+(oldProps.index - index)+"em))";
            setTimeout(() => {
              el.style.transitionDuration = "200ms";
              el.style.zIndex = "0";
              el.style.transform = "translateY(0%)";
            }, 250);
          }
        }}, [
        h('div', {class: "header"}, [
          h('h4', null, [thread.title]),
          h('p', null, ["by " + thread.author + " on " + currentBubble.name + " " + timeSince(thread.created)])
        ]),
        contentBlock,
        threadFooter(thread, actions)
      ])
    )
  }
};















const threadFooter = (thread, actions) => (
  h("div", { class: "footer" }, [
    h("div", { class: "users", userCount: thread.userCount, onupdate: (el, oldProps) => {
      if (oldProps.userCount < thread.userCount) {
        el.classList.add("countUp");
        setTimeout(() => {
          el.classList.remove("countUp");
        }, 25);
      } } }, [
        h("div", { class: "count" }, [
          h("span", {}, thread.userCount)
        ])
      ]),
    h("div", { class: "replies", messageCount: thread.messages.length, onupdate: (el, oldProps) => {
      if (oldProps.messageCount < thread.messages.length) {
        el.classList.add("countUp");
        setTimeout(() => {
          el.classList.remove("countUp");
        }, 25);
      } } }, [
        h("div", { class: "count" }, [
          h("span", {}, thread.messages.length)
        ])
      ]),
    h("button", { class: "upvote", score: thread.score, onclick: ev => {
      ev.stopPropagation();

      // Increase score and local upvoted count
      thread.score++;
      thread.upvoted++;

      // Update immediately on this client
      actions.updateState({
        bubbles: [
          {
            _id: thread.bubble_id,
            threads: [
              thread
            ]
          }
        ]
      });

      // Send to server
      socket.emit('thread upvote', thread);

    }, onupdate: (el, oldProps) => {
      if (oldProps.score < thread.score) {
        el.classList.add("countUp");
        setTimeout(() => {
          el.classList.remove("countUp");
        }, 25);
      }
    } }, [
      h("div", { class: "count" }, [
        h("span", {}, thread.score)
      ])
    ])
  ])
);

const ThreadKeyboard = (currentBubble, state, actions) =>
  h('form', {class: "keyboard", 'data-mode': "default", onsubmit: ev => {
    ev.preventDefault();

    if (ev.target.title.value) {


      // Create the thread object
      let thread = {
        _id: ObjectId(),
        title: ev.target.title.value,
        score: 0,
        created: new Date().getTime(),
        type: ev.target.dataset.mode,
        author: state.user.username,
        bubble_id: currentBubble._id
      };

      if (ev.target.dataset.mode == "text") {
        thread.text = ev.target.text.value;
      } else if (ev.target.dataset.mode == "link") {
        thread.url = ev.target.link.value;
      } else if (ev.target.dataset.mode == "image") {
        thread.src = ev.target.image_link.value;
      }


      // Append thread to list immediately
      actions.updateState({
        bubbles: [
          {
            _id: thread.bubble_id,
            threads: [
              thread
            ]
          }
        ]
      });


      setTimeout(() => { // Scroll to top after the re-render/update cycle has ended (to include the new element's height)
        var threadList = document.querySelector(".bubble-view .frame");
        threadList.scrollTop = 0;
      }, 10);


      // Send new thread to server
      socket.emit('new thread', thread);


      ev.target.dataset.mode = "default";
      ev.target.reset();
    }

    return false;
  }}, [
    h('div', {class: "expander", onclick: ev => ev.target.classList.contains("opened") ? ev.target.classList.remove("opened") : ev.target.classList.add("opened")}, [
      h('div', {class: "default", onclick: ev => { ev.target.parentElement.parentElement.dataset.mode = "default"; ev.target.parentElement.classList.remove("opened"); }}),
      h('div', {class: "text", onclick: ev => { ev.target.parentElement.parentElement.dataset.mode = "text"; ev.target.parentElement.classList.remove("opened"); }}),
      h('div', {class: "link", onclick: ev => { ev.target.parentElement.parentElement.dataset.mode = "link"; ev.target.parentElement.classList.remove("opened"); }}),
      h('div', {class: "image", onclick: ev => { ev.target.parentElement.parentElement.dataset.mode = "image"; ev.target.parentElement.classList.remove("opened"); }})
    ]),
    h('input', {type: "text", name: "title", placeholder: "Type something...", class: "title"}),
    h('textarea', {name: "text", placeholder: "Type something..."}),
    h('input', {type: "text", name: "link", placeholder: "Paste link here", class: "link"}),
    h('div', {class: "image"}, [
      h('label', {for: "image_file"}),
      h('input', {type: "file", name: "image_file", id: "image_file"}),
      h('input', {type: "text", name: "image_link", placeholder: "Or paste link here"})
    ]),
    h('button', {type: "submit", class: "submit"})
  ]);

const CurrentBubble = ({currentBubble, currentThread, state, actions}) => {
  if (currentBubble) {
    return (
      h('div', {class: "bubble-view", name: currentBubble.name, onupdate: (el, oldProps) => {
        if (oldProps.name != currentBubble.name) {
          // User switched bubbles
          socket.emit('switch bubble', {
            prevBubbleName: oldProps.name,
            nextBubbleName: currentBubble.name
          });
          console.log("--> join bubble: " + currentBubble.name);
        }
      }, oncreate: el => {
        socket.emit('switch bubble', {
          nextBubbleName: currentBubble.name
        });
        console.log("--> join bubble: " + currentBubble.name);
      }}, [
        h('div', {class: "frame", onscroll: ev => { if (isElementInViewport(ev.target.lastChild)) {  console.log("Load more not working yet"); } }}, [
          h('div', {class: "bubble-header"}, [
            Link({class: "back", to: "/" + name}),
            h('h2', null, [currentBubble.title]),
            h('div', {class: "options"}, [
              h('button', {onclick: ev => {
                if (ev.target.nextSibling.classList.contains("opened")) {
                  ev.target.nextSibling.classList.remove("opened");
                } else {
                  ev.target.nextSibling.classList.add("opened");
                }
              }}
              ),
              h('ul', null, [
                h('li', {onclick: ev => {
                  actions.removeBubble(currentBubble);
                }}, [h('span', null, ["Leave bubble"])])
              ])
            ])
          ]),
          h('ul', {class: "threads"}, [
            currentBubble.threads.map((thread, index) => ThreadItem(thread, index, currentBubble, currentThread, actions))
          ]),
          ThreadKeyboard(currentBubble, state, actions),
          h('div', {class: "loadMore"})
        ])
      ])
    )
  } else {
    return (
      h('div', {class: "bubble-view no-bubble"}, [
        h('h2', null, ["Pick a bubble!"])
      ])
    )
  }
};

const Thread = (thread, currentBubble, state, actions) => {

  let contentBlock;
  if (thread.type == "default") {
    contentBlock = null;
  } else if (thread.type == "text") {
    contentBlock = h('div', {class: "text"}, [thread.text]);
  } else if (thread.type == "link") {
    if (thread.url.match('^(https?\:\/\/)?(www\.youtube\.com|youtu\.?be)\/.+$')) { // If is youtube
      thread.src = "https://img.youtube.com/vi/"+getYoutubeId(thread.url)+"/hqdefault.jpg";
    }
    contentBlock = h('a', {href: thread.url, target: "_blank", class: "link"}, [thread.url]);
  } else if (thread.type == "image") {
    contentBlock = h('a', {href: thread.src, target: "_blank", class: "img"}, [h('img', {src: thread.src, alt: thread.title})]);
  }


  let canDelete;

  if (thread.author == state.user.username) { // If user owns this thread
    canDelete = h('li', {onclick: ev => {

      actions.removeThread(thread);

      socket.emit('archive thread', thread);

    }}, [h('span', null, ["Delete"])]);
  }



  return (
    h('li', {key: thread._id, class: "thread", 'data-type': thread.type, 'data-upvoted': thread.upvoted}, [
      h('div', {class: "header"}, [
        h('div', {class: "thread-header"}, [
          h('div', {class: "back", onclick: ev => {
            actions.location.go("/" + currentBubble.name);
          }}),
          h('h2', null, [thread.title]),
          h('div', {class: "options"}, [
            h('button', {onclick: ev => {
              if (ev.target.nextSibling.classList.contains("opened")) {
                ev.target.nextSibling.classList.remove("opened");
              } else {
                ev.target.nextSibling.classList.add("opened");
              }
            }}
            ),
            h('ul', null, [
              h('li', null, [h('span', null, ["Downvote"])]),
              h('li', null, [h('span', null, ["Save"])]),
              canDelete
            ])
          ])
        ]),
        h('p', null, ["by " + thread.author + " on " + currentBubble.name + " " + timeSince(thread.created)])
      ]),
      contentBlock
    ])
  )
};




// TODO: Add thread footer to the thread

const MessageKeyboard = (currentThread, state, actions) =>
  h('form', {class: "keyboard", 'data-mode': "default", onsubmit: ev => {
      ev.preventDefault();


      if (ev.target.title.value) {

        // Create the message object
        let message = {
          _id: ObjectId(),
          bubble_id: currentThread.bubble_id,
          thread_id: currentThread._id,
          sender: state.user.username,
          message: ev.target.title.value,
          created: new Date().getTime()
        };

        // Append message to list immediately
        actions.updateState({
          bubbles: [
            {
              _id: message.bubble_id,
              threads: [
                {
                  _id: message.thread_id,
                  messages: [
                    message
                  ]
                }
              ]
            }
          ]
        });


        // Send new message to server
        socket.emit('new message', message);


        ev.target.dataset.mode = "default";
        ev.target.reset();
      }

      return false;
    }}, [
    h('div', {class: "expander", onclick: ev => ev.target.classList.contains("opened") ? ev.target.classList.remove("opened") : ev.target.classList.add("opened")}, [
      h('div', {class: "default", onclick: ev => { ev.target.parentElement.parentElement.dataset.mode = "default"; ev.target.parentElement.classList.remove("opened"); }}),
      h('div', {class: "text", onclick: ev => { ev.target.parentElement.parentElement.dataset.mode = "text"; ev.target.parentElement.classList.remove("opened"); }}),
      h('div', {class: "link", onclick: ev => { ev.target.parentElement.parentElement.dataset.mode = "link"; ev.target.parentElement.classList.remove("opened"); }}),
      h('div', {class: "image", onclick: ev => { ev.target.parentElement.parentElement.dataset.mode = "image"; ev.target.parentElement.classList.remove("opened"); }})
    ]),
    h('input', {type: "text", name: "title", placeholder: "Type something...", class: "title"}),
    h('textarea', {name: "text", placeholder: "Type something..."}),
    h('input', {type: "text", name: "link", placeholder: "Paste link here", class: "link"}),
    h('div', {class: "image"}, [
      h('label', {for: "image_file"}),
      h('input', {type: "file", name: "image_file", id: "image_file"}),
      h('input', {type: "text", name: "image_link", placeholder: "Or paste link here"})
    ]),
    h('button', {type: "submit", class: "submit"})
  ]);

const CurrentThread = ({currentThread, currentBubble, state, actions}) => {
  if (currentThread) {
    return (
      h('div', {class: "thread-view", _id: currentThread._id, bubble_id: currentThread.bubble_id, messageCount: currentThread.messages.length, onupdate: (el, oldProps) => {
        if (oldProps._id != currentThread._id) {
          // User switched thread
          socket.emit('switch thread', {
            prevThread: oldProps,
            nextThread: currentThread
          });
          console.log("--> join thread: " + currentThread._id);
        }

        // If there is a new message
        if (oldProps.messageCount < currentThread.messages.length) {
          // Scroll down message list
          el.children[0].children[2].scrollTop = el.children[0].children[2].scrollHeight;
        }

      }, oncreate: el => {
        socket.emit('switch thread', {
          nextThread: currentThread
        });
        console.log("--> join thread: " + currentThread._id);
      }}, [
        h('div', {class: "frame", onscroll: ev => { if (isElementInViewport(ev.target.firstChild)) { console.log("Load more not working yet"); } }}, [
          h('div', {class: "loadMoreMessages"}),
          Thread(currentThread, currentBubble, state, actions),
          h('ul', {class: "messages"}, [
            currentThread.messages.map(message => MessageItem(message, state))
          ]),
          MessageKeyboard(currentThread, state, actions)
        ])
      ])
    )
  } else if (currentBubble) {
    return (
      h('div', {class: "thread-view no-thread"}, [
        h('h2', null, ["Now pick a thread!"])
      ])
    )
  }
};


const MessageItem = (message, state) => {
  let provenance;
  if (message.sender == state.user.username) {
    provenance = "sent";
  } else {
    provenance = "received";
  }
  return (
    h('li', {key: message._id, class: provenance, oncreate: el => {
      el.classList.add("newmessage");
      setTimeout(() => {
        el.classList.remove("newmessage");
      }, 25);
    }}, [
      h('div', {class: "content"}, [message.message]),
      h('div', {class: "info"}, [message.sender + " " + timeSince(message.created)])
    ])
  )
};

// Application root
const view = (state, actions) => {

  // console.log(state);

  // If logged in
  if (state.user._id) {


    let urlparts = window.location.pathname.split("/");




    // Manage mobile nav and last bubble / thread from url
    state.currentView = "userView";


    if (urlparts[1]) {

      // Load bubble from state
      state.currentBubble = state.bubbles.find(bubble => bubble.name == urlparts[1]);


      // Switch mobile view
      state.currentView = "bubbleView";

      // If the bubble doesn't exist in the state yet
      if (!state.currentBubble) {
        // Create a temporary bubble while it loads
        state.currentBubble = {
          name: urlparts[1],
          threads: []
        };
      }



      if (urlparts[2]) {

        // Load thread from state
        state.currentThread = state.currentBubble.threads.find(thread => thread._id == urlparts[2]);

        // Switch mobile view
        state.currentView = "threadView";
      }
    }





    return (
      h('div', {class: "slider " + state.currentView}, [
        UserView({currentBubble: state.currentBubble, state: state}),
        CurrentBubble({currentBubble: state.currentBubble, currentThread: state.currentThread, state: state, actions: actions}),
        CurrentThread({currentBubble: state.currentBubble, currentThread: state.currentThread, state: state, actions: actions})
      ])
    )
  } else {
    return (
      h('form', {class: "loginForm", onsubmit: ev => {
          ev.preventDefault();
          socket.emit('login', {
            username: ev.target.username.value
          });
          return false;
        }}, [
        h('h2', null, ["Pick a name"]),
        h('input', {type: "text", placeholder: "Type here...", name: "username", autofocus: true})
      ])
    )
  }
};

// Websocket connect
window.socket = io.connect(window.location.host);


// Load our hyperapp
window.main = app(state, actions, view, document.querySelector("main"));

// Activate our router
const unsubscribe = location$1.subscribe(main.location);



// Manage socket.io events
window.socket.on('update state', newState => main.updateState(newState));

window.socket.on('remove bubble', bubble => main.removeBubble(bubble));

window.socket.on('remove thread', thread => main.removeThread(thread));



// // Activate the service worker
// if ('serviceWorker' in navigator) {
//   window.addEventListener('load', function() {
//     navigator.serviceWorker.register('/sw.js').then(function(registration) {
//       // Registration was successful
//       console.log('ServiceWorker registration successful with scope: ', registration.scope);
//     }, function(err) {
//       // registration failed :(
//       console.log('ServiceWorker registration failed: ', err);
//     });
//   });
// }

}());
